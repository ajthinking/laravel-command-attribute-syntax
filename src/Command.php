<?php

namespace Thettler\LaravelCommandAttributeSyntax;

use Illuminate\Support\Str;
use Symfony\Component\Console\Command\Command as SymfonyCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Thettler\LaravelCommandAttributeSyntax\Attributes\Argument;
use Thettler\LaravelCommandAttributeSyntax\Attributes\CommandAttribute;
use Thettler\LaravelCommandAttributeSyntax\Reflections\ArgumentReflection;
use Thettler\LaravelCommandAttributeSyntax\Reflections\CommandReflection;
use Thettler\LaravelCommandAttributeSyntax\Reflections\OptionReflection;

class Command extends \Illuminate\Console\Command
{
    protected CommandReflection $reflection;

    public function __construct()
    {
        if (!CommandReflection::usesAttributeSyntax($this::class)) {
            parent::__construct();
            return;
        }

        $this->reflection = CommandReflection::new($this::class);

        $this->configureUsingAttributeDefinition();

        // Once we have constructed the command, we'll set the description and other
        // related properties of the command. If a signature wasn't used to build
        // the command we'll set the arguments and the options on this command.
        $this->setDescription($this->reflection->getDescription());
        $this->setHelp($this->reflection->getHelp());
        $this->setHidden($this->reflection->isHidden());
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {

        $this->reflection->getArguments()->each(function (ArgumentReflection $argumentReflection) {
            $this->{$argumentReflection->getName()} = $this->argument($argumentReflection->getName());
        });

        return parent::execute($input, $output); // TODO: Change the autogenerated stub
    }

    /**
     * Configure the console command using a fluent definition.
     *
     * @return void
     */
    protected function configureUsingAttributeDefinition()
    {
        SymfonyCommand::__construct($this->name = $this->reflection->getName());

        $this->configureArgumentsUsingAttributeDefinition();


//        $this->getDefinition()->addOptions($options);
    }

    protected function configureArgumentsUsingAttributeDefinition()
    {
        $this->reflection
            ->getArguments()
            ->each(function (ArgumentReflection $argumentReflection) {
                $this->getDefinition()
                    ->addArgument(
                        $this->propertyToArgument($argumentReflection)
                    );
            });
    }

    protected function configureOptionsUsingAttributeDefinition()
    {
        $this->reflection
            ->getOptions()
            ->each(function (OptionReflection $optionReflection) {
                $this->getDefinition()
                    ->addOption(
                        $this->porpertyToOption($optionReflection)
                    );
            });
    }

    protected function propertyToArgument(ArgumentReflection $argument): InputArgument
    {
        switch (true) {
            case $argument->isArray() && !$argument->isOptional():
                return new InputArgument($argument->getName(),
                    InputArgument::IS_ARRAY | InputArgument::REQUIRED, $argument->getDescription());
            case $argument->isArray():
                return new InputArgument($argument->getName(), InputArgument::IS_ARRAY,
                    $argument->getDescription(), $argument->getDefault());
            case $argument->isOptional() || $argument->getDefault():
                return new InputArgument($argument->getName(), InputArgument::OPTIONAL,
                    $argument->getDescription(), $argument->getDefault());
            default:
                return new InputArgument($argument->getName(), InputArgument::REQUIRED,
                    $argument->getDescription());
        }
    }

    protected function porpertyToOption(OptionReflection $option)
    {
//        $matches = preg_split('/\s*\|\s*/', $token, 2);
//
//        if (isset($matches[1])) {
//            $shortcut = $matches[0];
//            $token = $matches[1];
//        } else {
//            $shortcut = null;
//        }
//
//        switch (true) {
//            case Str::endsWith($token, '='):
//                return new InputOption(trim($token, '='), $shortcut, InputOption::VALUE_OPTIONAL, $description);
//            case Str::endsWith($token, '=*'):
//                return new InputOption(trim($token, '=*'), $shortcut, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, $description);
//            case preg_match('/(.+)\=\*(.+)/', $token, $matches):
//                return new InputOption($matches[1], $shortcut, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, $description, preg_split('/,\s?/', $matches[2]));
//            case preg_match('/(.+)\=(.+)/', $token, $matches):
//                return new InputOption($matches[1], $shortcut, InputOption::VALUE_OPTIONAL, $description, $matches[2]);
//            default:
//                return new InputOption($token, $shortcut, InputOption::VALUE_NONE, $description);
//        }
    }

    public function setDescription(string $description)
    {
        $this->description = $description;
        return parent::setDescription($description); // TODO: Change the autogenerated stub
    }

    public function setHelp(string $help)
    {
        $this->help = $help;
        return parent::setHelp($help); // TODO: Change the autogenerated stub
    }
}
