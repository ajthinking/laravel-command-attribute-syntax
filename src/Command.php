<?php

namespace Thettler\LaravelCommandAttributeSyntax;

use Illuminate\Support\Str;
use Symfony\Component\Console\Command\Command as SymfonyCommand;
use Symfony\Component\Console\Input\InputArgument;
use Thettler\LaravelCommandAttributeSyntax\Attributes\Argument;
use Thettler\LaravelCommandAttributeSyntax\Attributes\CommandAttribute;

class Command extends \Illuminate\Console\Command
{
    protected \ReflectionClass $reflection;
    protected CommandAttribute $commandAttribute;


    public function __construct()
    {
        $this->reflection = new \ReflectionClass($this);
        $attributes = $this->reflection->getAttributes(CommandAttribute::class);

        if (empty($attributes)) {
            parent::__construct();
            return;
        }
$this->hasArgument();
        $this->commandAttribute = $attributes[0]->newInstance();

        $this->configureUsingAttributeDefinition();

        // Once we have constructed the command, we'll set the description and other
        // related properties of the command. If a signature wasn't used to build
        // the command we'll set the arguments and the options on this command.
        $this->setDescription($this->commandAttribute->description);

        $this->setHelp($this->commandAttribute->help);

        $this->setHidden($this->commandAttribute->hidden !== null
            ? $this->commandAttribute->hidden
            : $this->hidden);
    }


    /**
     * Configure the console command using a fluent definition.
     *
     * @return void
     */
    protected function configureUsingAttributeDefinition()
    {
        SymfonyCommand::__construct($this->name = $this->commandAttribute->name);

        // After parsing the signature we will spin through the arguments and options
        // and set them on this command. These will already be changed into proper
        // instances of these "InputArgument" and "InputOption" Symfony classes.
        collect($this->reflection->getProperties())
            ->filter(fn(\ReflectionProperty $property) => !empty($property->getAttributes(Argument::class)))
            ->each(fn(\ReflectionProperty $property
            ) => $this->getDefinition()->addArgument($this->propertyToArgument($property)));

//        $this->getDefinition()->addOptions($options);
    }

    protected function propertyToArgument(\ReflectionProperty $property): InputArgument
    {
        $attribute = $property->getAttributes(Argument::class)[0]->newInstance();

        if ($attribute->optional) {
            return new InputArgument(
                $property->name,
                InputArgument::OPTIONAL,
                $attribute->description,
                $property->hasDefaultValue() ? $property->getDefaultValue() : null
            );
        }
        if ($property->hasDefaultValue()) {
            return new InputArgument(
                $property->name,
                InputArgument::OPTIONAL,
                $attribute->description,
                $property->getDefaultValue()
            );
        }

        return new InputArgument($property->name, InputArgument::REQUIRED, $attribute->description);

//        switch (true) {
//            case Str::endsWith($token, '?*'):
//                return new InputArgument(trim($token, '?*'), InputArgument::IS_ARRAY, $description);
//            case Str::endsWith($token, '*'):
//                return new InputArgument(trim($token, '*'), InputArgument::IS_ARRAY | InputArgument::REQUIRED,
//                    $description);
//            case Str::endsWith($token, '?'):
//                return new InputArgument(trim($token, '?'), InputArgument::OPTIONAL, $description);
//            case preg_match('/(.+)\=\*(.+)/', $token, $matches):
//                return new InputArgument($matches[1], InputArgument::IS_ARRAY, $description,
//                    preg_split('/,\s?/', $matches[2]));
//            case preg_match('/(.+)\=(.+)/', $token, $matches):
//                return new InputArgument($matches[1], InputArgument::OPTIONAL, $description, $matches[2]);
//            default:
//                return new InputArgument($token, InputArgument::REQUIRED, $description);
//        }
    }

    public function setDescription(string $description)
    {
        $this->description = $description;
        return parent::setDescription($description); // TODO: Change the autogenerated stub
    }

    public function setHelp(string $help)
    {
        $this->help = $help;
        return parent::setHelp($help); // TODO: Change the autogenerated stub
    }
}
